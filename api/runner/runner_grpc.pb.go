// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/runner/runner.proto

package runner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerClient interface {
	RunAlgo(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (Runner_RunAlgoClient, error)
}

type runnerClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerClient(cc grpc.ClientConnInterface) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) RunAlgo(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (Runner_RunAlgoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Runner_ServiceDesc.Streams[0], "/runner.Runner/runAlgo", opts...)
	if err != nil {
		return nil, err
	}
	x := &runnerRunAlgoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runner_RunAlgoClient interface {
	Recv() (*NodeData, error)
	grpc.ClientStream
}

type runnerRunAlgoClient struct {
	grpc.ClientStream
}

func (x *runnerRunAlgoClient) Recv() (*NodeData, error) {
	m := new(NodeData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunnerServer is the server API for Runner service.
// All implementations must embed UnimplementedRunnerServer
// for forward compatibility
type RunnerServer interface {
	RunAlgo(*RunRequest, Runner_RunAlgoServer) error
	mustEmbedUnimplementedRunnerServer()
}

// UnimplementedRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedRunnerServer struct {
}

func (UnimplementedRunnerServer) RunAlgo(*RunRequest, Runner_RunAlgoServer) error {
	return status.Errorf(codes.Unimplemented, "method RunAlgo not implemented")
}
func (UnimplementedRunnerServer) mustEmbedUnimplementedRunnerServer() {}

// UnsafeRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerServer will
// result in compilation errors.
type UnsafeRunnerServer interface {
	mustEmbedUnimplementedRunnerServer()
}

func RegisterRunnerServer(s grpc.ServiceRegistrar, srv RunnerServer) {
	s.RegisterService(&Runner_ServiceDesc, srv)
}

func _Runner_RunAlgo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunnerServer).RunAlgo(m, &runnerRunAlgoServer{stream})
}

type Runner_RunAlgoServer interface {
	Send(*NodeData) error
	grpc.ServerStream
}

type runnerRunAlgoServer struct {
	grpc.ServerStream
}

func (x *runnerRunAlgoServer) Send(m *NodeData) error {
	return x.ServerStream.SendMsg(m)
}

// Runner_ServiceDesc is the grpc.ServiceDesc for Runner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runner.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "runAlgo",
			Handler:       _Runner_RunAlgo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/runner/runner.proto",
}
