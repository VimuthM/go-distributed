// @generated by protobuf-ts 2.9.0 with parameter long_type_string
// @generated from protobuf file "runner.proto" (package "runner", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * The request message containing alogritm name and number of nodes.
 *
 * @generated from protobuf message runner.RunRequest
 */
export interface RunRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 nodes = 2;
     */
    nodes: number;
}
/**
 * TODO: How to identify termination?
 * The response message containing the nodes data.
 *
 * @generated from protobuf message runner.NodeData
 */
export interface NodeData {
    /**
     * @generated from protobuf field: int32 sender_id = 1;
     */
    senderId: number;
    /**
     * @generated from protobuf field: int32 receiver_id = 2;
     */
    receiverId: number;
    /**
     * @generated from protobuf field: int32 round = 3;
     */
    round: number;
    /**
     * @generated from protobuf field: int32 message = 4;
     */
    message: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class RunRequest$Type extends MessageType<RunRequest> {
    constructor() {
        super("runner.RunRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "nodes", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RunRequest>): RunRequest {
        const message = { name: "", nodes: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RunRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunRequest): RunRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 nodes */ 2:
                    message.nodes = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 nodes = 2; */
        if (message.nodes !== 0)
            writer.tag(2, WireType.Varint).int32(message.nodes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message runner.RunRequest
 */
export const RunRequest = new RunRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeData$Type extends MessageType<NodeData> {
    constructor() {
        super("runner.NodeData", [
            { no: 1, name: "sender_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "receiver_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "message", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<NodeData>): NodeData {
        const message = { senderId: 0, receiverId: 0, round: 0, message: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NodeData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NodeData): NodeData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 sender_id */ 1:
                    message.senderId = reader.int32();
                    break;
                case /* int32 receiver_id */ 2:
                    message.receiverId = reader.int32();
                    break;
                case /* int32 round */ 3:
                    message.round = reader.int32();
                    break;
                case /* int32 message */ 4:
                    message.message = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NodeData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 sender_id = 1; */
        if (message.senderId !== 0)
            writer.tag(1, WireType.Varint).int32(message.senderId);
        /* int32 receiver_id = 2; */
        if (message.receiverId !== 0)
            writer.tag(2, WireType.Varint).int32(message.receiverId);
        /* int32 round = 3; */
        if (message.round !== 0)
            writer.tag(3, WireType.Varint).int32(message.round);
        /* int32 message = 4; */
        if (message.message !== 0)
            writer.tag(4, WireType.Varint).int32(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message runner.NodeData
 */
export const NodeData = new NodeData$Type();
/**
 * @generated ServiceType for protobuf service runner.Runner
 */
export const Runner = new ServiceType("runner.Runner", [
    { name: "runAlgo", serverStreaming: true, options: {}, I: RunRequest, O: NodeData }
]);
