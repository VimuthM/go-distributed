// @generated by protobuf-ts 2.9.0 with parameter long_type_string
// @generated from protobuf file "runner.proto" (package "runner", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Runner } from "./runner";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { NodeData } from "./runner";
import type { RunRequest } from "./runner";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * The runner service definition.
 *
 * @generated from protobuf service runner.Runner
 */
export interface IRunnerClient {
    /**
     * @generated from protobuf rpc: runAlgo(runner.RunRequest) returns (stream runner.NodeData);
     */
    runAlgo(input: RunRequest, options?: RpcOptions): ServerStreamingCall<RunRequest, NodeData>;
}
/**
 * The runner service definition.
 *
 * @generated from protobuf service runner.Runner
 */
export class RunnerClient implements IRunnerClient, ServiceInfo {
    typeName = Runner.typeName;
    methods = Runner.methods;
    options = Runner.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: runAlgo(runner.RunRequest) returns (stream runner.NodeData);
     */
    runAlgo(input: RunRequest, options?: RpcOptions): ServerStreamingCall<RunRequest, NodeData> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RunRequest, NodeData>("serverStreaming", this._transport, method, opt, input);
    }
}
